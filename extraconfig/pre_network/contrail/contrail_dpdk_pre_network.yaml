heat_template_version: rocky

# NOTE: You don't need to pass the parameter explicitly from the
# parent template, it can be specified via the parameter_defaults
# in the resource_registry instead, if you want to override the default
# and/or share values with other templates in the tree.
parameters:
  RoleParameters:
    type: json
    description: Role Specific parameters
    default: {}
  ServiceNames:
    type: comma_delimited_list
    default: []
  deployment_actions:
    default: ['CREATE']
    type: comma_delimited_list
    description: >
      List of stack actions that will trigger any deployments in this
      templates. The actions will be an empty list of the server is in the
      toplevel DeploymentServerBlacklist parameter's value.
  server:
    type: string
  ContrailDpdkDriver:
    default: 'uio_pci_generic'
    description: DPDK Nic Driver
    type: string
  ContrailDpdkOptions:
    default: ''
    description: >
      Vrouter dpdk advanced options.
      This string is passed to dpdk container as env variable DPDK_COMMAND_ADDITIONAL_ARGS,
      so dpdk command line is populated with arguments from this string.
      E.g. --vr_mempool_sz --dpdk_txd_sz --dpdk_rxd_sz
      dpdk --vr_dpdk_rx_ring_sz <int>  --vr_dpdk_tx_ring_sz <int> –yield_option ‘0 or 1’
    type: string
  ContrailRegistry:
    default: 'opencontrailnightly'
    description: Contrail Registry
    type: string
  ContrailImageTag:
    default: 'latest'
    description: Contrail container image tag
    type: string
  DockerContrailVrouterKernelInitDpdkImageName:
    description: image
    type: string
    default: "contrail-vrouter-kernel-init-dpdk"
  DockerContrailVrouterAgentDpdkContainerName:
    description: image
    type: string
    default: "contrail-vrouter-agent-dpdk"
  DockerContrailVrouterAgentContainerName:
    description: image
    type: string
    default: "contrail-vrouter-agent"
  DockerContrailVrouterPluginInitImageName:
    description: >
      Vrouter plugin init container image name.
      It is a name of the vrouter plugin init image. It is
      for cases when third-party HW requires specific drivers to be installed.
      E.g. Mellanox requries some drivers on host to be installed.
      For Mellanox the image name is contrail-vrouter-plugin-mellanox-init-redhat
    type: string
    default: ''
  NodeDataLookup:
    type: json
    default: {}
    description: json string containing per-node configuration map
  ContrailSettings:
    default: {}
    description: Contrail Service settings
    type: json

description: >
  This template installs the Contrail dpdk packages in order
  to bring vhost0 interface up. Vhost0 interface must be up before
  os-net-config takes over.

conditions:
  is_kernel_config_required:
    or:
      - {equals: [{get_param: ContrailDpdkDriver}, "vfio-pci"]}
      - {equals: [{get_param: [RoleParameters, ContrailDpdkDriver]}, "vfio-pci"]}
  deployment_actions_empty:
    equals:
      - {get_param: deployment_actions}
      - []

resources:
  DockerContrailVrouterKernelImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailVrouterKernelInitDpdkImageName}

  DockerContrailVrouterPluginInitImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailVrouterPluginInitImageName}

  DockerContrailVrouterAgentImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailVrouterAgentContainerName}

  DockerContrailVrouterAgentDpdkImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailVrouterAgentDpdkContainerName}

  ContrailSettingsRoleParametersValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_replace:
          - map_replace:
            - contrail_settings: ContrailSettings
              dpdk_driver: ContrailDpdkDriver
              dpdk_options: ContrailDpdkOptions
            - values: {get_param: [RoleParameters]}
          - values:
              ContrailSettings: {get_param: ContrailSettings}
              ContrailDpdkDriver: {get_param: ContrailDpdkDriver}
              ContrailDpdkOptions: {get_param: ContrailDpdkOptions}

  DpdkHostParametersConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: _IS_DPDK_
      outputs:
        - name: result
      config:
        get_file: contrail_ansible_host_config.yaml

  DpdkHostParametersDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: DpdkHostParametersDeployment
      server:  {get_param: server}
      config: {get_resource: DpdkHostParametersConfig}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE'] # Only do this on CREATE
      input_values:
        _IS_DPDK_: "True"

  DpdkContainerParametersConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: _NODEDATA_
          type: Json
        - name: _CONTRAIL_SETTINGS_
          type: Json
        - name: _CONTRAIL_VROUTER_INIT_IMAGE_
        - name: _CONTRAIL_VROUTER_INIT_IMAGE_NAME_
        - name: _CONTRAIL_VROUTER_AGENT_DPDK_IMAGE_
        - name: _CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME_
        - name: _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_
        - name: _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_
        - name: _CONTRAIL_DPDK_COMMAND_ADDITIONAL_ARGS_
        - name: _IS_DPDK_
      outputs:
        - name: result
      config:
        get_file: contrail_ansible_container_config.yaml

  DpdkContainerParametersDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: DpdkContainerParametersDeployment
      server:  {get_param: server}
      config: {get_resource: DpdkContainerParametersConfig}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE', 'UPDATE']
      input_values:
        _NODEDATA_: {get_param: NodeDataLookup}
        _CONTRAIL_SETTINGS_: {get_attr: [ContrailSettingsRoleParametersValue, value, contrail_settings]}
        _CONTRAIL_VROUTER_INIT_IMAGE_: {get_attr: [DockerContrailVrouterKernelImageNormalize, contrail_image]}
        _CONTRAIL_VROUTER_INIT_IMAGE_NAME_: {get_attr: [DockerContrailVrouterKernelImageNormalize, contrail_image_only]}
        _CONTRAIL_VROUTER_AGENT_DPDK_IMAGE_: {get_attr: [DockerContrailVrouterAgentDpdkImageNormalize, contrail_image]}
        _CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME_: {get_attr: [DockerContrailVrouterAgentDpdkImageNormalize, contrail_image_only]}
        _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_: {get_attr: [DockerContrailVrouterPluginInitImageNormalize, contrail_image]}
        _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_: {get_attr: [DockerContrailVrouterPluginInitImageNormalize, contrail_image_only]}
        _CONTRAIL_DPDK_COMMAND_ADDITIONAL_ARGS_: {get_attr: [ContrailSettingsRoleParametersValue, value, dpdk_options]}
        _IS_DPDK_: "True"
    depends_on:
      - DpdkHostParametersDeployment
      - DockerContrailVrouterPluginInitImageNormalize
      - DockerContrailVrouterKernelImageNormalize
      - DockerContrailVrouterAgentImageNormalize
      - DockerContrailVrouterAgentDpdkImageNormalize


outputs:
  result:
    condition: is_kernel_config_required
    value:
      get_attr: [DpdkContainerParametersDeployment, result]
  stdout:
    condition: is_kernel_config_required
    value:
      get_attr: [DpdkContainerParametersDeployment, deploy_stdout]
  stderr:
    condition: is_kernel_config_required
    value:
      get_attr: [DpdkContainerParametersDeployment, deploy_stderr]
  status_code:
    condition: is_kernel_config_required
    value:
      get_attr: [DpdkContainerParametersDeployment, deploy_status_code]
