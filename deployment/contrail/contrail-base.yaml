heat_template_version: rocky

description: >
  Base parameters for all Contrail Services.

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  DeployIdentifier:
    type: string
    default: ''
    description: >
      Setting this to a unique value will re-run any deployment tasks which
      perform configuration on a Heat stack-update.
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  AdminPassword:
    description: The password for the keystone admin account, used for monitoring, querying neutron etc.
    type: string
    hidden: true
  AdminTenantName:
    description: Keystone admin tenant name
    type: string
    default: 'admin'
  AdminUser:
    description: Keystone admin user name
    type: string
    default: 'admin'
  KeystoneProjectDomainName:
    type: string
    default: 'Default'
    description: Keystone Project Domain Name
  KeystoneRegion:
    type: string
    default: 'regionOne'
    description: Keystone region for endpoint
  KeystoneUserDomainName:
    type: string
    default: 'Default'
    description: Keystone User Domain Name
  AAAMode:
    description: AAAmode can be no-auth, cloud-admin or rbac
    type: string
    default: 'cloud-admin'
  ContrailConfigPort:
    type: string
    default: '8082'
    description: Config API port
  ContrailConfigIPs:
    description:  Comma separated list of Contrail Config API servers.
                  The servers that are not part of the RHOSP voercloud cluster and
                  deployed separatly.
    type: string
  ContrailControlIPs:
    description:  Comma separated list of Contrail Control servers.
                  The servers that are not part of the RHOSP voercloud cluster and
                  deployed separatly.
    type: string
  ContrailAnalyticsIPs:
    description:  Comma separated list of Contrail Analytics servers.
                  The servers that are not part of the RHOSP voercloud cluster and
                  deployed separatly.
    type: string
  ContrailRegistry:
    default: 'opencontrailnightly'
    description: Contrail Registry
    type: string
  ContrailSettings:
    default: {}
    description: Contrail Service settings
    type: json
  ContrailDefaults:
    default: {}
    description: Dict of env variables for provisioner container
    type: json
  ContrailImageTag:
    default: 'latest'
    description: Contrail container image tag
    type: string
  DockerContrailNodemgrImageName:
    description: image
    type: string
    default: "contrail-nodemgr"
  DockerContrailProvisionerImageName:
    description: image
    type: string
    default: "contrail-provisioner"
  SSLCertificate:
    default: ''
    description: >
      The content of the SSL certificate (without Key) in PEM format.
    type: string
  PublicSSLCertificateAutogenerated:
    default: false
    description: >
      Whether the public SSL certificate was autogenerated or not.
    type: boolean
  DeployedSSLCertificatePath:
    default: '/etc/pki/tls/private/overcloud_endpoint.pem'
    description: >
        The filepath of the certificate as it will be stored in the controller.
    type: string
  EnableInternalTLS:
    type: boolean
    default: false
  CertmongerCA:
    type: string
    default: 'IPA'
  InternalTLSCAFile:
    default: '/etc/ipa/ca.crt'
    type: string
    description: Specifies the default CA cert to use if TLS is used for
                 services in the internal network.
  InternalTLSCRLPEMFile:
    default: '/etc/pki/CA/crl/overcloud-crl.pem'
    type: string
    description: Specifies the default CRL PEM file to use for revocation if
                 TLS is used for services in the internal network.
  ContrailCA:
    default: ''
    description: Contrail CA, could be local or IPA
    type: string
  ContrailSslEnabled:
    description:  Flag to identify is SSL should be used in internal Contrail
                  services communications (sandesh, introspect, xmpp, ..).
    type: boolean
    default: false
  ContrailServiceCertFile:
    description: Path to the node's public certificate
    type: string
    default: ''
  ContrailServiceKeyFile:
    description: Path to server's/node's private key
    type: string
    default: ''
  ContrailCaCertFile:
    default: ''
    description: Path to CA certificate
    type: string
  ContrailCaKeyFile:
    default: ''
    description: Path to CA private key
    type: string
  ContrailRedisPort:
    default: 6379
    description: Contrail Redis port
    type: number
  NodeDataLookup:
    type: json
    default: {}
    description: json containing per-node configuration map
  # internal params
  contrail_nodes_param_suffux:
    type: string
    default: "node_ips"
    description: suffix for reading hiera data, node_ips or node_names
  contrail_env_name:
    type: string
    default: ''
    description: name of env file for service, concatenated with common_<name>.env 

conditions:
  is_not_5_0:
    not:
      yaql:
        expression: $.data.split(":")[-1].matches("5\.0")
        data: {get_param: ContrailImageTag}
  contrail_config_ips_unset: {equals: [{get_param: ContrailConfigIPs}, '']}
  contrail_control_ips_unset: {equals: [{get_param: ContrailControlIPs}, '']}
  contrail_analytics_ips_unset: {equals: [{get_param: ContrailAnalyticsIPs}, '']}
  public_tls_enabled:
    or:
      - not: {equals: [{get_param: SSLCertificate}, '']}
      - {equals: [{get_param: PublicSSLCertificateAutogenerated}, true]}
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}
  internal_ipa_ca: {equals: [{get_param: CertmongerCA}, 'IPA']}
  contrail_tls_enabled: {equals: [{get_param: ContrailSslEnabled}, true]}
  contrail_ipa_ca: {equals: [{get_param: ContrailCA}, 'IPA']}
  bind_contrail_ca_file:
    and:
      - contrail_tls_enabled
      - contrail_ipa_ca
      - or:
        - not: internal_tls_enabled
        - not: {equals: [{get_param: ContrailCaCertFile}, {get_param: InternalTLSCAFile}]}
  set_auth_ca_file:
    and:
      - internal_tls_enabled
      - internal_ipa_ca
  haproxy_verify_host:
    and:
      - internal_tls_enabled
      - internal_ipa_ca
      - contrail_tls_enabled
      - contrail_ipa_ca
      - {equals: [{get_param: ContrailCaCertFile}, {get_param: InternalTLSCAFile}]}

  contrail_api_ssl_enabled:
    and:
      - is_not_5_0
      - contrail_tls_enabled

  # !! ported from queens - maybe not needed anynmore
  # tripleo-heat-templates/docker/services/haproxy.yaml:
  # NOTE(jaosorior): We disable the CRL since we have no way to restart haproxy
  # when this is updated
  haproxy_crl_file: false
  # haproxy_crl_file:
  #   not: {equals: [{get_param: InternalTLSCRLPEMFile}, '']}

resources:
  ContainersCommon:
    type: ../containers-common.yaml

  # Merging role-specific parameters (RoleParameters) with the default parameters.
  # RoleParameters will have the precedence over the default parameters.
  RoleParametersValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_replace:
          - map_replace:
            - contrail_settings: ContrailSettings
              contrail::aaa_mode: AAAMode
            - values: {get_param: [RoleParameters]}
          - values:
              ContrailSettings: {get_param: ContrailSettings}
              AAAMode: {get_param: AAAMode}

  ContrailNodemgrImageNormalize:
    type: ../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailNodemgrImageName}
  ContrailProvisionerImageNormalize:
    type: ../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailProvisionerImageName}
outputs:
  role_data:
    description: Shared role data for the Contrail services.
    value:
      contrail_nodemgr_image_name: {get_attr: [ContrailNodemgrImageNormalize, contrail_image]}
      contrail_provisioner_image_name: {get_attr: [ContrailProvisionerImageNormalize, contrail_image]}
      config_settings:
        map_merge:
        - contrail::admin_password: {get_param: AdminPassword}
          contrail::admin_tenant_name: {get_param: AdminTenantName}
          contrail::admin_user: {get_param: AdminUser}
          # ==
          # for puppets: neutron_plugin.pp and heat.pp
          # todo: remove admin_token after puppet update
          contrail::admin_token: ''
          contrail::auth_host: {get_param: [EndpointMap, KeystoneAdmin, host] }
          contrail::auth_port: {get_param: [EndpointMap, KeystoneAdmin, port] }
          contrail::auth_protocol: {get_param: [EndpointMap, KeystoneAdmin, protocol] }
          contrail::api_port: {get_param: ContrailConfigPort}
          contrail::keystone_region: {get_param: KeystoneRegion}
          contrail::keystone_project_domain_name: {get_param: KeystoneProjectDomainName}
          contrail::keystone_user_domain_name: {get_param: KeystoneUserDomainName}
          contrail_internal_api_ssl: {get_param: EnableInternalTLS}
          contrail_ssl_enabled: {get_param: ContrailSslEnabled}
          # ==
          node_data_lookup: {get_param: NodeDataLookup}
        - get_attr: [RoleParametersValue, value]
        - if:
          - set_auth_ca_file
          - contrail::auth_ca_file: {get_param: InternalTLSCAFile}
          - null
        - if:
            - contrail_config_ips_unset
            - null
            - contrail_config_ips: {get_param: ContrailConfigIPs}
        - if:
            - contrail_control_ips_unset
            - null
            - contrail_control_ips: {get_param: ContrailControlIPs}
        - if:
            - contrail_analytics_ips_unset
            - null
            - contrail_analytics_ips: {get_param: ContrailAnalyticsIPs}
      haproxy_config_settings_member_options: &haproxy_config_settings_member_options
          - 'check'
          - 'inter 2000'
          - 'rise 2'
          - 'fall 5'
      haproxy_config_settings_member_options_tls: &haproxy_config_settings_member_options_tls
        list_concat:
          - *haproxy_config_settings_member_options
          - - 'ssl'
          - if:
            - haproxy_verify_host
            - list_concat:
              - - 'verify required'
                - list_join:
                  - ' '
                  - - 'ca-file'
                    - {get_param: InternalTLSCAFile}
              - if:
                - haproxy_crl_file
                - - list_join:
                    - ' '
                    - - 'crl-file'
                      - {get_param: InternalTLSCRLPEMFile}
                - null
            - - 'verify none'
      haproxy_config_settings_listen_options: &haproxy_config_settings_listen_options
        balance:
          - 'source'
        hash-type:
          - 'consistent'
      haproxy_config_settings: &haproxy_config_settings
        public_virtual_ip: "%{hiera('public_virtual_ip')}"
        mode: 'http'
        listen_options:
          option:
            - 'httpchk GET /'
            - 'httplog'
            - 'forwardfor'
          http-request:
            - 'set-header X-Forwarded-Proto https if { ssl_fc }'
            - 'set-header X-Forwarded-Proto http if !{ ssl_fc }'
        # TODO: use this section as RedHat port the commit from upstream quuens:
        #   commit 47ec9ce49b0a9e26701f63c9841ab2f982f7af32
        #   Author: Andrew Austin <aaustin@redhat.com>
        #   Date:   Thu Jun 21 22:08:51 2018 +0000
        #    Add mechanism for cookie-based sessions in endpoints.
        # --
        # sticky_sessions: true
        # session_cookie: 'SERVERID'
        # listen_options:
        #   balance:
        #     - 'roundrobin'
        #   option:
        #     - 'forwardfor'
        #   http-request:
        #     - 'set-header X-Forwarded-Proto https if { ssl_fc }'
        #     - 'set-header X-Forwarded-Proto http if !{ ssl_fc }'
        member_options: *haproxy_config_settings_member_options
      haproxy_config_settings_tls: &haproxy_config_settings_tls
        map_merge:
          - *haproxy_config_settings
          - member_options: *haproxy_config_settings_member_options_tls
      haproxy_config_settings_api: &haproxy_config_settings_api
        if:
          - contrail_api_ssl_enabled
          - *haproxy_config_settings_tls
          - *haproxy_config_settings
      haproxy_config_settings_webui: &haproxy_config_settings_webui
        map_merge:
          - listen_options: *haproxy_config_settings_listen_options
          - if:
            - public_tls_enabled
            - map_merge:
              - *haproxy_config_settings_tls
              - listen_options:
                  yaql:
                    expression: $.data.reduce($1.listen_options.mergeWith($2))
                    data:
                      - *haproxy_config_settings_tls
                      - *haproxy_config_settings_listen_options
            - public_virtual_ip: "%{hiera('public_virtual_ip')}"
              mode: 'tcp'
              member_options: *haproxy_config_settings_member_options
      contrail_service_conf_dir: &contrail_service_conf_dir
        list_join:
          - ''
          - - '/var/lib/config-data/contrail/'
            - {get_param: contrail_env_name}
      # added contrail_service_conf_dir volume to make work docker/docker-puppet.py
      # ('/' trailing '/' in path is important as rhosp docker-puppet.py expects it)
      contrail_base_volumes: &contrail_base_volumes
        list_concat:
          - {get_attr: [ContainersCommon, volumes]}
          - - /etc/contrail/ssl:/etc/contrail/ssl:z
            - /var/crashes:/var/crashes:z
            - /var/log/containers/contrail:/var/log/contrail:z
            - list_join:
                - ''
                - - *contrail_service_conf_dir
                  - '/:'
                  - *contrail_service_conf_dir
                  - '/:ro'
          - if:
            - bind_contrail_ca_file
            - - list_join:
                - ':'
                - - {get_param: ContrailCaCertFile}
                  - {get_param: ContrailCaCertFile}
                  - 'ro'
            - null
      contrail_general_base_env: &contrail_general_base_env
        CLOUD_ORCHESTRATOR: 'openstack'
        OPENSTACK_VERSION: 'train'
        AAA_MODE: {get_attr: [RoleParametersValue, value, 'contrail::aaa_mode']}
        REDIS_SERVER_PORT: {get_param: ContrailRedisPort}
      contrail_auth_base_env: &contrail_auth_base_env
        AUTH_MODE: 'keystone'
        KEYSTONE_AUTH_URL_VERSION: '/v3'
        KEYSTONE_AUTH_ADMIN_PASSWORD: {get_param: AdminPassword}
        KEYSTONE_AUTH_ADMIN_USER: {get_param: AdminUser}
        KEYSTONE_AUTH_ADMIN_TENANT: {get_param: AdminTenantName}
        KEYSTONE_AUTH_REGION_NAME: {get_param: KeystoneRegion}
        KEYSTONE_AUTH_PROJECT_DOMAIN_NAME: {get_param: KeystoneProjectDomainName}
        KEYSTONE_AUTH_USER_DOMAIN_NAME: {get_param: KeystoneUserDomainName}
      contrail_auth_admin_env: &contrail_auth_admin_env
        KEYSTONE_AUTH_HOST: {get_param: [EndpointMap, KeystoneAdmin, host]}
        KEYSTONE_AUTH_ADMIN_PORT: {get_param: [EndpointMap, KeystoneAdmin, port]}
        KEYSTONE_AUTH_PROTO: {get_param: [EndpointMap, KeystoneAdmin, protocol]}
      contrail_auth_internal_env: &contrail_auth_internal_env
        KEYSTONE_AUTH_HOST: {get_param: [EndpointMap, KeystoneInternal, host]}
        KEYSTONE_AUTH_ADMIN_PORT: {get_param: [EndpointMap, KeystoneInternal, port]}
        KEYSTONE_AUTH_PROTO: {get_param: [EndpointMap, KeystoneInternal, protocol]}
      contrail_tls_env: &contrail_tls_env
        if:
          - contrail_tls_enabled
          - map_merge:
              - SSL_ENABLE: "True"
                XMPP_SSL_ENABLE: "True"
                SANDESH_SSL_ENABLE: "True"
                INTROSPECT_SSL_ENABLE: "True"
                SERVER_CERTFILE: {get_param: ContrailServiceCertFile}
                SERVER_KEYFILE: {get_param: ContrailServiceKeyFile}
                SERVER_CA_CERTFILE: {get_param: ContrailCaCertFile}
                SERVER_CA_KEYFILE: {get_param: ContrailCaKeyFile}
              - if:
                  - contrail_ipa_ca
                  - INTROSPECT_SSL_INSECURE: 'False'
                  - INTROSPECT_SSL_INSECURE: 'True'
              - if:
                  - is_not_5_0
                  - KAFKA_SSL_ENABLE: "True"
                    CASSANDRA_SSL_ENABLE: "True"
                    RABBITMQ_USE_SSL: "True"
                  - KAFKA_SSL_ENABLE: "False"
                    CASSANDRA_SSL_ENABLE: "False"
                    RABBITMQ_USE_SSL: "False"

          - {}
      contrail_auth_tls_env: &contrail_auth_tls_env
        if:
          - internal_tls_enabled
          - map_merge:
              - KEYSTONE_AUTH_CERTFILE: {get_param: ContrailServiceCertFile}
                KEYSTONE_AUTH_KEYFILE: {get_param: ContrailServiceKeyFile}
              - if:
                - internal_ipa_ca
                - KEYSTONE_AUTH_INSECURE: 'False'
                  KEYSTONE_AUTH_CA_CERTFILE: {get_param: InternalTLSCAFile}
                - KEYSTONE_AUTH_INSECURE: 'True'
          - {}
      metadata_tls_env: &metadata_tls_env
        if:
          - internal_tls_enabled
          - METADATA_SSL_ENABLE: 'True'
            METADATA_SSL_CERTFILE: {get_param: ContrailServiceCertFile}
            METADATA_SSL_KEYFILE: {get_param: ContrailServiceKeyFile}
            METADATA_SSL_CA_CERTFILE: {get_param: InternalTLSCAFile}
          - {}
      contrail_common_base_env: &contrail_common_base_env
        map_merge:
          - *contrail_general_base_env
          - *contrail_tls_env
          - *contrail_auth_tls_env
          - *metadata_tls_env
      contrail_base_env: &contrail_base_env
        map_merge:
          - *contrail_auth_base_env
          - *contrail_auth_admin_env
          - TRIPLEO_DEPLOY_IDENTIFIER: {get_param: DeployIdentifier}
      contrail_defaults_env: &contrail_defaults_env {get_param: ContrailDefaults}
      contrail_base_auth_internal_env: &contrail_base_auth_internal_env
        map_merge:
          - *contrail_auth_base_env
          - *contrail_auth_internal_env
          - TRIPLEO_DEPLOY_IDENTIFIER: {get_param: DeployIdentifier}
      contrail_common_env_file: &contrail_common_env_file
        "/etc/contrail/common_contrail.env"
      contrail_kafka_service_name: &contrail_kafka_service_name
        if:
          - is_not_5_0
          - 'contrail_analytics_alarm'
          - 'contrail_analytics_database'
      contrail_cert_file: &contrail_cert_file {get_param: ContrailServiceCertFile}
      contrail_certkey_file: &contrail_certkey_file {get_param: ContrailServiceKeyFile}
      contrail_selfsigned_ca_flag: &contrail_selfsigned_ca_flag {if: [contrail_ipa_ca, 'false', 'true']}
      contrail_base_env_file: &contrail_base_env_file
        - *contrail_common_env_file
      contrail_host_prep_tasks_base:
        - name: Contrail Base host prep tasks
          block:
            - name: register common env file
              stat:
                path: *contrail_common_env_file
              register: p
            - name: create common env file
              copy:
                dest: *contrail_common_env_file
                content: ""
              when: not p.stat.exists
            - name: set contrail base calculated parameters
              set_fact:
                contrail_base_env_params: *contrail_common_base_env
            - name: write contrail base parameters to environment file
              lineinfile:
                dest: *contrail_common_env_file
                state: present
                regexp: "^{{ item.key }}.*"
                line: "{{ item.key }}={{ item.value }}"
              with_dict: "{{ contrail_base_env_params }}"

            - name: get external contrail control node ips
              shell: hiera -c /etc/puppet/hiera.yaml contrail_config_ips
              register: contrail_config_nodes_list
            - name: set contrail config ips
              set_fact:
                contrail_config_nodes_string: "{{ contrail_config_nodes_list.stdout | regex_replace('nil', '') }}"
            - when: contrail_config_nodes_string == ''
              block:
                - name: config api node ips (names) param name
                  set_fact:
                    contrail_nodes_param_name: {list_join: ["_", ["contrail_config", {get_param: contrail_nodes_param_suffux}]]}
                - name: get contrail config node ips
                  shell: "hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}"
                  register: contrail_config_nodes_list
                - name: turn contrail config ips into string
                  set_fact:
                    contrail_config_nodes_string: "{{ contrail_config_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: config db node ips (names) param name
              set_fact:
                contrail_nodes_param_name: {list_join: ["_", ["contrail_database", {get_param: contrail_nodes_param_suffux}]]}
            - name: get contrail config database node ips
              shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
              register: contrail_database_nodes_list
            - name: turn contrail config db ips into string
              set_fact:
                contrail_database_nodes_string: "{{ contrail_database_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: get external contrail control node ips
              shell: hiera -c /etc/puppet/hiera.yaml contrail_control_ips
              register: contrail_control_nodes_list
            - name: set contrail control ips
              set_fact:
                contrail_control_nodes_string: "{{ contrail_control_nodes_list.stdout | regex_replace('nil', '') }}"
            - when: contrail_control_nodes_string == ''
              block:
                - name: config node ips (names) param name
                  set_fact:
                    contrail_nodes_param_name: {list_join: ["_", ["contrail_control", {get_param: contrail_nodes_param_suffux}]]}
                - name: get contrail control node ips
                  shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
                  register: contrail_control_nodes_list
                - name: turn contrail control ips into string
                  set_fact:
                    contrail_control_nodes_string: "{{ contrail_control_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: get external contrail analytics node ips
              shell: hiera -c /etc/puppet/hiera.yaml contrail_analytics_ips
              register: contrail_analytics_nodes_list
            - name: set contrail analytics ips
              set_fact:
                contrail_analytics_nodes_string: "{{ contrail_analytics_nodes_list.stdout | regex_replace('nil', '') }}"
            - when: contrail_analytics_nodes_string == ''
              block:
                - name: analytics node ips (names) param name
                  set_fact:
                    contrail_nodes_param_name: {list_join: ["_", ["contrail_analytics", {get_param: contrail_nodes_param_suffux}]]}
                - name: get contrail analytics node ips
                  shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
                  register: contrail_analytics_nodes_list
                - name: turn contrail analytics ips into string
                  set_fact:
                    contrail_analytics_nodes_string: "{{ contrail_analytics_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: snmp node ips (names) param name
              set_fact:
                contrail_nodes_param_name: {list_join: ["_", ["contrail_analytics_snmp", {get_param: contrail_nodes_param_suffux}]]}
            - name: get contrail analytics snmp node ips
              shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
              register: contrail_analytics_snmp_nodes_list
            - name: turn contrail analytics snmp ips into string
              set_fact:
                contrail_analytics_snmp_nodes_string: "{{ contrail_analytics_snmp_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: alarm node ips (names) param name
              set_fact:
                contrail_nodes_param_name: {list_join: ["_", ["contrail_analytics_alarm", {get_param: contrail_nodes_param_suffux}]]}
            - name: get contrail analytics alarm node ips
              shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
              register: contrail_analytics_alarm_nodes_list
            - name: turn contrail analytics ips into string
              set_fact:
                contrail_analytics_alarm_nodes_string: "{{ contrail_analytics_alarm_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: analytics db node ips (names) param name
              set_fact:
                contrail_nodes_param_name: {list_join: ["_", ["contrail_analytics_database", {get_param: contrail_nodes_param_suffux}]]}
            - name: get contrail analytics database node ips
              shell: hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}
              register: contrail_analytics_database_nodes_list
            - name: turn contrail analytics database ips into string
              set_fact:
                contrail_analytics_database_nodes_string: "{{ contrail_analytics_database_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',') }}"

            - name: kafka services specific node ips param name
              set_fact:
                contrail_nodes_param_name: {list_join: ["_", [*contrail_kafka_service_name, {get_param: contrail_nodes_param_suffux}]]}
            - name: get contrail service specific node ips
              shell: "hiera -c /etc/puppet/hiera.yaml {{ contrail_nodes_param_name }}"
              register: contrail_service_nodes_list
            - name: turn contrail service specific node ips into string
              set_fact:
                contrail_kafka_service_nodes_string: "{{ contrail_service_nodes_list.stdout | regex_replace('nil', '[]') | from_json | join(',')  }}"

            - name: write contrail config node ips to environment file
              lineinfile:
                dest: *contrail_common_env_file
                state: present
                regexp: "^{{ item.key }}.*"
                line: "{{ item.key }}={{ item.value }}"
              with_dict:
                ANALYTICS_ALARM_ENABLE: "{{ 'True' if contrail_analytics_alarm_nodes_string != '' else 'False' }}"
                ANALYTICS_SNMP_ENABLE: "{{ 'True' if contrail_analytics_snmp_nodes_string != '' else 'False' }}"
                ANALYTICSDB_ENABLE: "{{ 'True' if contrail_analytics_database_nodes_string != '' else 'False' }}"
                ANALYTICS_NODES: "{{ contrail_analytics_nodes_string }}"
                ANALYTICS_SNMP_NODES: "{{ contrail_analytics_snmp_nodes_string }}"
                ANALYTICS_ALARM_NODES: "{{ contrail_analytics_alarm_nodes_string }}"
                ANALYTICSDB_NODES: "{{ contrail_analytics_database_nodes_string }}"
                CONFIG_NODES: "{{ contrail_config_nodes_string }}"
                CONFIGDB_NODES: "{{ contrail_database_nodes_string }}"
                CONTROL_NODES: "{{ contrail_control_nodes_string }}"
                DNS_NODES: "{{ contrail_control_nodes_string }}"
                RABBITMQ_NODES: "{{ contrail_database_nodes_string }}"
                RABBITMQ_NODE_PORT: 5673
                KAFKA_NODES: "{{ contrail_kafka_service_nodes_string }}"
  # dont set zk, all services except kafka uses default zk from configdb
  #               ZOOKEEPER_NODES: "{{ contrail_database_nodes_string }}"

            # Process contrail settings as they can be Role specific and should
            # overwrite previous values if any.
            - name: get dmi
              shell: |
                #!/bin/sh
                dmidecode --s system-uuid | awk 'match($0, /[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}/) { print substr($0, RSTART, RLENGTH) }'
              register: dmi
            - name: set dmi fact
              set_fact:
                dmi_uuid: "{{ dmi.stdout }}"
            - name: get contrail_settings
              shell: "hiera -c /etc/puppet/hiera.yaml contrail_settings ::uuid={{ dmi_uuid }} | sed 's/=>/:/g'"
              register: contrail_settings_string
            - name: turn contrail_settings into json
              set_fact:
                contrail_settings: "{{ contrail_settings_string.stdout | from_json }}"
              when:
                - contrail_settings_string.stdout is defined
                - contrail_settings_string.stdout != "nil"
            - name: write contrail settings to file
              lineinfile:
                dest: *contrail_common_env_file
                regexp: "^{{ item.key }}.*"
                line: "{{ item.key }}={{ item.value }}"
                state: present
              with_dict: "{{ contrail_settings }}"
              when: contrail_settings is defined
            - name: create selinux policy file for nodemgr
              block:
                - name: create policy file for nodemgr
                  blockinfile:
                    path: /tmp/contrail_nodemgr.te
                    create: yes
                    block: |
                      module contrail_nodemgr 1.0;

                      require {
                              type unconfined_t;
                              type container_share_t;
                              class file entrypoint;
                      }

                      #============= unconfined_t ==============
                      ##!!!! The file '/usr/bin/conmon' is mislabeled on your system.
                      ##!!!! Fix with $ restorecon -R -v /usr/bin/conmon
                      allow unconfined_t container_share_t:file entrypoint;

                - name: create contrail nodemgr selinux policy module
                  shell: "/bin/checkmodule -M -m -o /tmp/contrail_nodemgr.mod /tmp/contrail_nodemgr.te"
                - name: create contrail nodemgr selinux policy package
                  shell: "/bin/semodule_package -o /tmp/contrail_nodemgr.pp -m /tmp/contrail_nodemgr.mod"
                - name: install contrail nodemgr selinux policy package
                  shell: "/sbin/semodule -i /tmp/contrail_nodemgr.pp"
            # WA: until move node-init into host-prep
            # rerun it to create self-signed certs. Node-init starts too early
            # before network config is applied
            - name: contrail_selfsigned_ca_flag
              set_fact:
                contrail_selfsigned_ca_flag: *contrail_selfsigned_ca_flag
            - name: Re-create Contrail self-signed certs
              when: "{{ contrail_selfsigned_ca_flag | bool }}"
              block:
                - name: contrail cert file
                  set_fact:
                    contrail_cert_file: *contrail_cert_file
                - name: contrail key file
                  set_fact:
                    contrail_certkey_file: *contrail_certkey_file
                - name: remove current cert files
                  shell: rm -f {{ contrail_cert_file }} {{ contrail_certkey_file }}
                - name: re-run node-init container
                  shell: |
                    if {{ container_cli }} inspect contrail-node-init >/dev/null 2>&1 ; then
                      {{ container_cli }} start -i contrail-node-init
                    fi

            - name: create selinux module for unprivileged contrail containers
              block:
                - name: create selinux module file /tmp/contrail_container.cil
                  blockinfile:
                    path: /tmp/contrail_container.cil
                    marker: "; {mark} ANSIBLE MANAGED BLOCK"
                    create: yes
                    block: |
                      (block contrail_container
                      (allow chkpwd_t container_file_t (lnk_file (read)))
                      (allow container_t cloud_init_t ( unix_dgram_socket ( sendto )))
                      (allow container_t container_file_t (chr_file (read)))
                      (allow container_t container_share_t ( file ( entrypoint )))
                      (allow container_t container_var_run_t (file ( openat open read write lock )))
                      (allow container_t mount_var_run_t (dir ( openat read write )))
                      (allow container_t spc_t (dir (getattr)))
                      (allow container_t spc_t (fifo_file (write ioctl getattr setattr)))
                      (allow container_t system_dbusd_t (dbus (send_msg)))
                      (allow container_t var_t ( dir ( openat open read getattr lock search ioctl add_name remove_name write setattr create )))
                      (allow container_t var_t ( file ( getattr read write append ioctl lock map open create setattr unlink )))
                      (allow container_t var_t ( sock_file ( getattr read write append open )))
                      (allow container_t var_lib_t ( dir ( openat open read getattr lock search ioctl add_name remove_name write setattr create )))
                      (allow container_t var_lib_t ( file ( getattr read write append ioctl lock map open create setattr unlink )))
                      (allow container_t var_lib_t ( sock_file ( getattr read write append open )))
                      (allow chronyc_t container_file_t (lnk_file ( read )))
                      (allow chronyd_t container_file_t (lnk_file ( read )))
                      (allow chronyd_t spc_t ( unix_dgram_socket ( sendto )))
                      (allow chronyd_t cloud_init_t ( unix_dgram_socket ( sendto )))
                      (allow certmonger_t sudo_exec_t ( file ( execute execute_no_trans open read )))
                      (allow certmonger_t container_file_t ( dir ( search open read getattr setattr add_name remove_name create )))
                      (allow certmonger_t container_file_t ( file ( getattr read write append ioctl lock map open create setattr unlink )))
                      (allow certmonger_t container_file_t ( lnk_file ( read )))
                      (allow certmonger_t self ( capability ( sys_resource )))
                      (allow certmonger_t self ( netlink_audit_socket ( create )))
                      (allow certmonger_t sssd_conf_t ( dir ( search openat read write )))
                      (allow certmonger_t sssd_conf_t ( file ( getattr read open )))
                      (allow certmonger_t chkpwd_exec_t ( file ( execute )))
                      (allow certmonger_t self  (process ( setrlimit )))
                      (allow kmod_t container_file_t (system ( module_load )))
                      (allow NetworkManager_t container_file_t (file (read open)))
                      (allow sshd_t container_file_t (lnk_file (read)))
                      (allow system_dbusd_t container_file_t (lnk_file (read)))
                      (allow systemd_logind_t container_file_t (lnk_file (read)))
                      (allow svirt_tcg_t container_file_t ( dir ( read  )))
                      (allow timedatex_t container_file_t ( lnk_file ( read )))
                      )
                - name: create selinux module from file /tmp/contrail_container.cil
                  shell: "/sbin/semodule -i /tmp/contrail_container.cil"

      # tasks for preparing md5 of env files to include into containers as TRIPLEO_CONFIG_HASH
      contrail_config_volume_prep:
        - name: service config name
          set_fact:
            contrail_conf_name: {get_param: contrail_env_name}
        - name: Contrail config volume prep tasks
          when: contrail_conf_name != ''
          block:
            - name: common service env file name
              set_fact:
                contrail_service_common_env_file: *contrail_common_env_file
            - name: service env file path
              set_fact:
                contrail_service_env_file: "/etc/contrail/common_{{ contrail_conf_name }}.env"
            - name: service config dir
              set_fact:
                contrail_service_conf_dir: *contrail_service_conf_dir
            - name: service config md5 sum file
              set_fact:
                contrail_service_conf_md5_file: "{{ contrail_service_conf_dir }}.md5sum"
            # create fake empty dir and correct config md5sum to make work docker/docker-puppet.py
            - name: save md5 service env files and common env
              shell: |
                #!/bin/bash -x
                vars=$(cat {{ contrail_service_common_env_file }} {{ contrail_service_env_file }} | sort -u)
                rm -f {{ contrail_service_conf_dir }}
                mkdir -p {{ contrail_service_conf_dir }}
                cp {{ contrail_service_common_env_file }} {{ contrail_service_env_file }} {{ contrail_service_conf_dir }}/
                echo "$vars" | md5sum | awk '{print($1)}' > {{ contrail_service_conf_md5_file }}
                cat {{ contrail_service_conf_md5_file }}
              register: config_md5sum
            - debug:
                msg: "service config md5sum: service={{ contrail_conf_name }} md5={{ config_md5sum.stdout }}"

      metadata_settings: []

      fast_forward_post_upgrade_tasks_common: []

      upgrade_tasks_common: []

      contrail_puppet_update_tasks:
        - set_fact:
            contrail_puppet_setup_dir: "/usr/share/contrail-tripleo-puppet"
        - name: Check contrail tripleo puppet module was installed.
          stat:
            path: "{{ contrail_puppet_setup_dir }}"
          register: file_details
        - when: file_details.stat.exists
          block:
            - set_fact:
                puppet_module_dir: "/usr/share/openstack-puppet/modules/tripleo/"
            - name: Sync contrail-tripleo-puppet module into tripleo
              shell: "rsync -a {{ contrail_puppet_setup_dir }}/ {{ puppet_module_dir }}"
